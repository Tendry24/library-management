#https://petstore.swagger.io/?url=https://raw.githubusercontent.com/Tendry24/library-management/oas-td2-std22076/docs/api.yml#/
openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22076
servers:
  - url: https://library.com

tags:
  - name: Books
    description: Operations related to Books
  - name: Authors
    description: Operations related to Books

paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string

        - in: query
          name: startDate
          description: start of intervals
          required: false
          schema:
            type: string
            format: date
        
        - in: query
          name: endDate
          description: end of intervals
          required: false
          schema:
            type: string
            format: date

        - in: query
          name: page
          description: first page
          schema:
            type: integer
            default: 1

        - in: query
          name: pageSize
          description: last page
          schema:
            type: integer
            default: 50
        

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: The returned authors are ordered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter return Author by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'

    put: 
      tags:
        - "Authors"
      summary: Create or update a list of Authors
      operationId: CreateOrUpdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The list of created or updated Author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'

    delete:
        tags:
        - Authors
        summary: Delete one author
        operationId: deleteAuthorbyId
        parameters:
          - in: query
            name: AuthorId
            required: true
            schema:
              type: integer
            description: ID of the author to delete
        responses:
          '200':
            description: Author deleted successfully

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Update the author of the book
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID of the book
          schema:
            type: integer
        - name: authorId
          in: path
          required: true
          description: ID of the new author
          schema:
            type: integer
      responses:
        '200':
          description: Opération réussie
        '404':
          description: Livre ou auteur non trouvé
  
      
        

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          type: string
          items:
           $ref: '#/components/schemas/author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    #TODO1
    author: 
      type: object
      properties:
        id: 
          type: string
          description: id unique
          format: uuid
        name:
          type: string
          description: author's name
        gender:
          type: string
          description: sex of the authors
          enum:
            - M
            - F

    Crupdate:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            Author:
              type: object
              properties:
                ID:
                  type: integer
                authorName:
                  type: string
              nullable: true
          required:
            - ID
            - bookName
            - pageNumbers
            - topic
            - releaseDate


  /books/{bookId}/authors/{authorId}:
    put:
      summary: Modifier l'auteur d'un livre
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID du livre à modifier
          schema:
            type: integer
        - name: authorId
          in: path
          required: true
          description: ID du nouvel auteur
          schema:
            type: integer
      responses:
        '200':
          description: Opération réussie
        '404':
          description: Livre ou auteur non trouvé


# b - 
#i -- L'utilisation d'un modèle léger tel que UpdateBookAuthor contenant uniquement les identifiants bookId et authorId,
#sans les autres propriétés, est plus courte et efficace car elle se concentre uniquement sur l'aspect de mise à jour
#des relations entre les entités (le livre et l'auteur). Cela simplifie la gestion des opérations de mise à jour,
#réduit la charge de données et maintient la simplicité de l'API, sans la nécessité de transmettre des données redondantes.


#ii -- UpdateBookAuthor devrait contenir les propriétés de
# CrupdateBook et de Author lorsque vous souhaitez autoriser la
# modification simultanée des détails du livre et de l'auteur en 
# une seule opération, simplifiant ainsi le processus de mise à jour.
# Cela est pertinent lorsque vous avez besoin de mettre à jour 
# l'ensemble des informations liées au livre et à l'auteur en une seule étape.

#3 - a 

# la pagination est necessaire pour : 
#facilier la lecture , simplifier la navigation , ameliorer la performance
#Organiser le contenu , eviter la surcharge de l'information 

#4 - a

#oui , on peut gerer la pagination à travers les entêtes comme "Link " ou "range " , on
# peut gerer la pagination de maniere flexible sans changer d'URL

#4 - b 
#Non ,  ce n'est pas une bonne pratique car les users peuvent